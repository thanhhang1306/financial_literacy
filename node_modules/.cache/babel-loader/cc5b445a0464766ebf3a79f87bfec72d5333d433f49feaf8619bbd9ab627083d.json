{"ast":null,"code":"/* Singleton class that holds the current state of the game,\n   and handles the main life cycle of the game. */\n\nconst CARD_TYPE = {\n  NEED: 0,\n  WANT: 1,\n  EVENT: 2\n};\nclass GameManager {\n  static init() {\n    if (GameManager._gameManagerInstance == null) GameManager._gameManagerInstance = new GameManager();\n  }\n  static getInstance() {\n    return GameManager._gameManagerInstance;\n  }\n  constructor() {\n    this.gameState = GameManager.GAME_STATE.DRAW_CARDS;\n    this.year = 1;\n    this.balance = 1000;\n    this.incomeSources = [];\n    this.expenseSources = [];\n    this._currentCardsDrawn = [];\n    this._currentCardSelections = [];\n  }\n  toggleSelection(cardIndex) {\n    if (this.gameState !== GameManager.GAME_STATE.SELECT_CARDS) return;\n    const card = this._currentCardsDrawn[cardIndex];\n    if (this._currentCardSelections.includes(card)) {\n      this._currentCardSelections = this._currentCardSelections.filter(c => c !== card);\n    } else {\n      this._currentCardSelections.push(card);\n    }\n  }\n  drawCards() {\n    if (this.gameState !== GameManager.GAME_STATE.DRAW_CARDS) return;\n    this.gameState = GameManager.GAME_STATE.SELECT_CARDS;\n    this._currentCardsDrawn.push(new Card(CARD_TYPE.WANT, \"Income\", 100));\n    this._currentCardsDrawn.push(new Card(CARD_TYPE.NEED, \"Need\", 100));\n    this._currentCardsDrawn.push(new Card(CARD_TYPE.EVENT, \"Event\", 100));\n    return this._currentCardsDrawn;\n  }\n}\nGameManager.GAME_STATE = {\n  DRAW_CARDS: 0,\n  SELECT_CARDS: 1,\n  RESOLVE_CARDS: 2,\n  END_GAME: 3\n};\nGameManager._gameManagerInstance = null;\nclass Card {\n  constructor(cardType, description, value) {\n    this.cardType = cardType;\n    this.description = description;\n    this.value = value;\n  }\n}\n\n// Data.\n\nexport default GameManager;","map":{"version":3,"names":["CARD_TYPE","NEED","WANT","EVENT","GameManager","init","_gameManagerInstance","getInstance","constructor","gameState","GAME_STATE","DRAW_CARDS","year","balance","incomeSources","expenseSources","_currentCardsDrawn","_currentCardSelections","toggleSelection","cardIndex","SELECT_CARDS","card","includes","filter","c","push","drawCards","Card","RESOLVE_CARDS","END_GAME","cardType","description","value"],"sources":["/Users/hangpham/HackPrinceton/finance-app1/financial_literacy/src/core/gameManager.js"],"sourcesContent":["/* Singleton class that holds the current state of the game,\n   and handles the main life cycle of the game. */\n\nconst CARD_TYPE = {\n  NEED: 0,\n  WANT: 1,\n  EVENT: 2\n}\n\nclass GameManager {\n  static GAME_STATE = {\n    DRAW_CARDS: 0,\n    SELECT_CARDS: 1,\n    RESOLVE_CARDS: 2,\n    END_GAME: 3\n  }\n\n  static _gameManagerInstance = null;\n\n  static init() {\n    if (GameManager._gameManagerInstance == null)\n      GameManager._gameManagerInstance = new GameManager();\n  }\n\n  static getInstance() {\n    return GameManager._gameManagerInstance;\n  }\n\n  constructor() {\n    this.gameState = GameManager.GAME_STATE.DRAW_CARDS;\n    this.year = 1;\n    this.balance = 1000;\n    this.incomeSources = [];\n    this.expenseSources = [];\n\n    this._currentCardsDrawn = [];\n    this._currentCardSelections = [];\n  }\n\n  toggleSelection(cardIndex) {\n    if (this.gameState !== GameManager.GAME_STATE.SELECT_CARDS) return;\n    const card = this._currentCardsDrawn[cardIndex];\n\n    if (this._currentCardSelections.includes(card)) {\n      this._currentCardSelections = this._currentCardSelections.filter(c => c !== card);\n    } else {\n      this._currentCardSelections.push(card);\n    }\n  }\n\n  drawCards() {\n    if (this.gameState !== GameManager.GAME_STATE.DRAW_CARDS) return;\n    this.gameState = GameManager.GAME_STATE.SELECT_CARDS;\n\n    this._currentCardsDrawn.push(new Card(CARD_TYPE.WANT, \"Income\", 100));\n    this._currentCardsDrawn.push(new Card(CARD_TYPE.NEED, \"Need\", 100));\n    this._currentCardsDrawn.push(new Card(CARD_TYPE.EVENT, \"Event\", 100));\n  \n    return this._currentCardsDrawn;\n  }\n}\n\nclass Card {\n  constructor(cardType, description, value) {\n    this.cardType = cardType;\n    this.description = description;\n    this.value = value;\n  }\n}\n\n\n\n\n\n// Data.\n\n\n\nexport default GameManager;"],"mappings":"AAAA;AACA;;AAEA,MAAMA,SAAS,GAAG;EAChBC,IAAI,EAAE,CAAC;EACPC,IAAI,EAAE,CAAC;EACPC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,WAAW,CAAC;EAUhB,OAAOC,IAAIA,CAAA,EAAG;IACZ,IAAID,WAAW,CAACE,oBAAoB,IAAI,IAAI,EAC1CF,WAAW,CAACE,oBAAoB,GAAG,IAAIF,WAAW,EAAE;EACxD;EAEA,OAAOG,WAAWA,CAAA,EAAG;IACnB,OAAOH,WAAW,CAACE,oBAAoB;EACzC;EAEAE,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,SAAS,GAAGL,WAAW,CAACM,UAAU,CAACC,UAAU;IAClD,IAAI,CAACC,IAAI,GAAG,CAAC;IACb,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB,IAAI,CAACC,cAAc,GAAG,EAAE;IAExB,IAAI,CAACC,kBAAkB,GAAG,EAAE;IAC5B,IAAI,CAACC,sBAAsB,GAAG,EAAE;EAClC;EAEAC,eAAeA,CAACC,SAAS,EAAE;IACzB,IAAI,IAAI,CAACV,SAAS,KAAKL,WAAW,CAACM,UAAU,CAACU,YAAY,EAAE;IAC5D,MAAMC,IAAI,GAAG,IAAI,CAACL,kBAAkB,CAACG,SAAS,CAAC;IAE/C,IAAI,IAAI,CAACF,sBAAsB,CAACK,QAAQ,CAACD,IAAI,CAAC,EAAE;MAC9C,IAAI,CAACJ,sBAAsB,GAAG,IAAI,CAACA,sBAAsB,CAACM,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKH,IAAI,CAAC;IACnF,CAAC,MAAM;MACL,IAAI,CAACJ,sBAAsB,CAACQ,IAAI,CAACJ,IAAI,CAAC;IACxC;EACF;EAEAK,SAASA,CAAA,EAAG;IACV,IAAI,IAAI,CAACjB,SAAS,KAAKL,WAAW,CAACM,UAAU,CAACC,UAAU,EAAE;IAC1D,IAAI,CAACF,SAAS,GAAGL,WAAW,CAACM,UAAU,CAACU,YAAY;IAEpD,IAAI,CAACJ,kBAAkB,CAACS,IAAI,CAAC,IAAIE,IAAI,CAAC3B,SAAS,CAACE,IAAI,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;IACrE,IAAI,CAACc,kBAAkB,CAACS,IAAI,CAAC,IAAIE,IAAI,CAAC3B,SAAS,CAACC,IAAI,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;IACnE,IAAI,CAACe,kBAAkB,CAACS,IAAI,CAAC,IAAIE,IAAI,CAAC3B,SAAS,CAACG,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;IAErE,OAAO,IAAI,CAACa,kBAAkB;EAChC;AACF;AAnDMZ,WAAW,CACRM,UAAU,GAAG;EAClBC,UAAU,EAAE,CAAC;EACbS,YAAY,EAAE,CAAC;EACfQ,aAAa,EAAE,CAAC;EAChBC,QAAQ,EAAE;AACZ,CAAC;AANGzB,WAAW,CAQRE,oBAAoB,GAAG,IAAI;AA6CpC,MAAMqB,IAAI,CAAC;EACTnB,WAAWA,CAACsB,QAAQ,EAAEC,WAAW,EAAEC,KAAK,EAAE;IACxC,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,KAAK,GAAGA,KAAK;EACpB;AACF;;AAMA;;AAIA,eAAe5B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}