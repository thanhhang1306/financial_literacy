{"ast":null,"code":"/* Singleton class that holds the current state of the game,\n   and handles the main life cycle of the game. */\nimport { Wants, Needs, Events } from './ChoiceData.js';\nconst CARD_TYPE = {\n  NEED: 0,\n  WANT: 1,\n  EVENT: 2\n};\nclass GameManager {\n  static init() {\n    if (GameManager._gameManagerInstance == null) GameManager._gameManagerInstance = new GameManager();\n  }\n  static getInstance() {\n    return GameManager._gameManagerInstance;\n  }\n  constructor() {\n    this.gameState = GameManager.GAME_STATE.DRAW_CARDS;\n    this.year = 1;\n    this.balance = 1000;\n    this.salary = 80000;\n    this.savings = 0;\n    this.investment = 0;\n    this.debt = 0;\n    this.incomeSources = [];\n    this.expenseSources = [];\n    this._currentCardsDrawn = [];\n    this._currentCardSelections = [];\n\n    //\n    this.selectedNeed = 0;\n    this.selectedWant = 0;\n    this.selectedDebt = 0;\n    this.selectedTotal = 0;\n    this.selectedSavings = 0;\n    this.selectedInvestments = 0;\n  }\n  toggleSelection(cardIndex) {\n    if (this.gameState !== GameManager.GAME_STATE.SELECT_CARDS) return;\n    const card = this._currentCardsDrawn[cardIndex];\n    if (this._currentCardSelections.includes(card)) {\n      this._currentCardSelections = this._currentCardSelections.filter(c => c !== card);\n    } else {\n      this._currentCardSelections.push(card);\n    }\n  }\n  getCardSelections() {\n    return this._currentCardSelections;\n  }\n  drawCards() {\n    if (this.gameState !== GameManager.GAME_STATE.DRAW_CARDS) return;\n    this.gameState = GameManager.GAME_STATE.SELECT_CARDS;\n    const randomNeed = Needs[Math.floor(Math.random() * Needs.length)];\n    const needCard = new Card(CARD_TYPE.NEED, randomNeed.text, 0, randomNeed.need);\n    this._currentCardsDrawn.push(needCard);\n    this._currentCardsDrawn.push(new Card(CARD_TYPE.NEED, \"NEED\", 0, 100));\n    this._currentCardsDrawn.push(new Card(CARD_TYPE.WANT, \"Want\", 1, 100));\n    // this._currentCardsDrawn.push(new Card(CARD_TYPE.WANT, \"WantEvent\", 100));\n\n    for (const card of this._currentCardsDrawn) {\n      if (!card.selectable) continue;\n      this.selectedNeed = 100;\n      if (card.cardType === CARD_TYPE.NEED) this.selectedNeed += card.value;else if (card.cardType === CARD_TYPE.EVENT) this.selectedWant += card.value;\n    }\n    this.lazyUpdateUI();\n    return this._currentCardsDrawn;\n  }\n  getSelectedValues() {\n    return {\n      need: this.selectedNeed,\n      want: this.selectedWant,\n      debt: this.selectedDebt,\n      total: this.selectedTotal,\n      savings: this.selectedSavings,\n      investments: this.selectedInvestments\n    };\n  }\n  lazyUpdateUI() {\n    document.querySelector(\".need\").innerHTML = \"Need: $\" + this.selectedNeed;\n    document.querySelector(\".want\").innerHTML = \"Want: $\" + this.selectedWant;\n    document.querySelector(\".debt\").innerHTML = \"Debt: $\" + this.selectedDebt;\n    document.querySelector(\".salary-discrepancy\").innerHTML = \"Salary + Discrepency: $\" + this.selectedTotal;\n    document.querySelector(\".saving\").innerHTML = \"Saving: $\" + this.selectedSavings;\n    document.querySelector(\".investment\").innerHTML = \"Investment: $\" + this.selectedInvestments;\n    //\n    document.querySelector(\".salary\").innerHTML = \"Salary: $\" + this.salary;\n    document.querySelector(\".savings\").innerHTML = \"Savings: $\" + this.savings;\n    document.querySelector(\".investment\").innerHTML = \"Investment: $\" + this.investment;\n    document.querySelector(\".debt\").innerHTML = \"Debt: $\" + this.debt;\n  }\n}\nGameManager.GAME_STATE = {\n  DRAW_CARDS: 0,\n  SELECT_CARDS: 1,\n  RESOLVE_CARDS: 2,\n  END_GAME: 3\n};\nGameManager._gameManagerInstance = null;\nclass Card {\n  constructor(cardType, description, type, value) {\n    this.cardType = cardType;\n    this.description = description;\n    this.value = value;\n    this.selectable = cardType == CARD_TYPE.WANT ? true : false;\n  }\n}\n\n// Data.\n\nexport default GameManager;","map":{"version":3,"names":["Wants","Needs","Events","CARD_TYPE","NEED","WANT","EVENT","GameManager","init","_gameManagerInstance","getInstance","constructor","gameState","GAME_STATE","DRAW_CARDS","year","balance","salary","savings","investment","debt","incomeSources","expenseSources","_currentCardsDrawn","_currentCardSelections","selectedNeed","selectedWant","selectedDebt","selectedTotal","selectedSavings","selectedInvestments","toggleSelection","cardIndex","SELECT_CARDS","card","includes","filter","c","push","getCardSelections","drawCards","randomNeed","Math","floor","random","length","needCard","Card","text","need","selectable","cardType","value","lazyUpdateUI","getSelectedValues","want","total","investments","document","querySelector","innerHTML","RESOLVE_CARDS","END_GAME","description","type"],"sources":["/Users/hangpham/HackPrinceton/finance-app1/financial_literacy/src/core/gameManager.js"],"sourcesContent":["/* Singleton class that holds the current state of the game,\n   and handles the main life cycle of the game. */\nimport { Wants, Needs, Events } from './ChoiceData.js';\n\nconst CARD_TYPE = {\n  NEED: 0,\n  WANT: 1,\n  EVENT: 2\n}\n\nclass GameManager {\n  static GAME_STATE = {\n    DRAW_CARDS: 0,\n    SELECT_CARDS: 1,\n    RESOLVE_CARDS: 2,\n    END_GAME: 3\n  }\n\n  static _gameManagerInstance = null;\n\n  static init() {\n    if (GameManager._gameManagerInstance == null)\n      GameManager._gameManagerInstance = new GameManager();\n  }\n\n  static getInstance() {\n    return GameManager._gameManagerInstance;\n  }\n\n  constructor() {\n    this.gameState = GameManager.GAME_STATE.DRAW_CARDS;\n    this.year = 1;\n    this.balance = 1000;\n    this.salary = 80000;\n    this.savings = 0;\n    this.investment = 0;\n    this.debt = 0;\n    this.incomeSources = [];\n    this.expenseSources = [];\n\n    this._currentCardsDrawn = [];\n    this._currentCardSelections = [];\n\n    //\n    this.selectedNeed = 0;\n    this.selectedWant = 0;\n    this.selectedDebt = 0;\n    this.selectedTotal = 0;\n    this.selectedSavings = 0;\n    this.selectedInvestments = 0;\n  }\n\n\n  \n  toggleSelection(cardIndex) {\n    if (this.gameState !== GameManager.GAME_STATE.SELECT_CARDS) return;\n    const card = this._currentCardsDrawn[cardIndex];\n\n    if (this._currentCardSelections.includes(card)) {\n      this._currentCardSelections = this._currentCardSelections.filter(c => c !== card);\n    } else {\n      this._currentCardSelections.push(card);\n    }\n  }\n\n  getCardSelections() {\n    return this._currentCardSelections;\n  }\n\n  drawCards() {\n    if (this.gameState !== GameManager.GAME_STATE.DRAW_CARDS) return;\n    this.gameState = GameManager.GAME_STATE.SELECT_CARDS;\n    const randomNeed = Needs[Math.floor(Math.random() * Needs.length)];\n    const needCard = new Card(CARD_TYPE.NEED, randomNeed.text, 0, randomNeed.need);\n    this._currentCardsDrawn.push(needCard);\n\n\n    this._currentCardsDrawn.push(new Card(CARD_TYPE.NEED, \"NEED\", 0, 100));\n    this._currentCardsDrawn.push(new Card(CARD_TYPE.WANT, \"Want\", 1, 100));\n    // this._currentCardsDrawn.push(new Card(CARD_TYPE.WANT, \"WantEvent\", 100));\n  \n    for (const card of this._currentCardsDrawn) {\n      if (!card.selectable) continue;\n      this.selectedNeed = 100;\n      if (card.cardType === CARD_TYPE.NEED) this.selectedNeed += card.value;\n      else if (card.cardType === CARD_TYPE.EVENT) this.selectedWant += card.value;\n    }\n    this.lazyUpdateUI();\n    return this._currentCardsDrawn;\n  }\n\n  getSelectedValues() {\n    return {\n      need: this.selectedNeed,\n      want: this.selectedWant,\n      debt: this.selectedDebt,\n      total: this.selectedTotal,\n      savings: this.selectedSavings,\n      investments: this.selectedInvestments\n    }\n  }\n\n  lazyUpdateUI() {\n    document.querySelector(\".need\").innerHTML = \"Need: $\" + this.selectedNeed;\n    document.querySelector(\".want\").innerHTML = \"Want: $\" + this.selectedWant;\n    document.querySelector(\".debt\").innerHTML = \"Debt: $\" + this.selectedDebt;\n    document.querySelector(\".salary-discrepancy\").innerHTML = \"Salary + Discrepency: $\" + this.selectedTotal;\n    document.querySelector(\".saving\").innerHTML = \"Saving: $\" + this.selectedSavings;\n    document.querySelector(\".investment\").innerHTML = \"Investment: $\" + this.selectedInvestments;\n    //\n    document.querySelector(\".salary\").innerHTML = \"Salary: $\" + this.salary;\n    document.querySelector(\".savings\").innerHTML = \"Savings: $\" + this.savings;\n    document.querySelector(\".investment\").innerHTML = \"Investment: $\" + this.investment;\n    document.querySelector(\".debt\").innerHTML = \"Debt: $\" + this.debt;\n  \n  }\n}\n\nclass Card {\n  constructor(cardType, description, type, value) {\n    this.cardType = cardType;\n    this.description = description;\n    this.value = value;\n    this.selectable = (cardType == CARD_TYPE.WANT) ? true : false;\n  }\n}\n\n\n\n\n\n// Data.\n\n\n\nexport default GameManager;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}