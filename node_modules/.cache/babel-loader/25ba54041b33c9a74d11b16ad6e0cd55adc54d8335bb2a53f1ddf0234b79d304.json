{"ast":null,"code":"/* Singleton class that holds the current state of the game,\n   and handles the main life cycle of the game. */\nimport { Wants, Needs, Events } from './ChoiceData.js';\nconst CARD_TYPE = {\n  NEED: 0,\n  WANT: 1,\n  EVENT: 2\n};\nclass GameManager {\n  static init() {\n    if (GameManager._gameManagerInstance == null) GameManager._gameManagerInstance = new GameManager();\n  }\n  static getInstance() {\n    return GameManager._gameManagerInstance;\n  }\n  constructor() {\n    this.gameState = GameManager.GAME_STATE.DRAW_CARDS;\n    this.year = 1;\n    this.balance = 1000;\n    this.salary = 80000;\n    this.savings = 0;\n    this.investment = 0;\n    this.debt = 0;\n    this.incomeSources = [];\n    this.expenseSources = [];\n    this._currentCardsDrawn = [];\n    this._currentCardSelections = [];\n\n    //\n    this.selectedNeed = 0;\n    this.selectedWant = 0;\n    this.selectedDebt = 0;\n    this.selectedTotal = 0;\n    this.selectedSavings = 0;\n    this.selectedInvestments = 0;\n  }\n  toggleSelection(cardIndex) {\n    if (this.gameState !== GameManager.GAME_STATE.SELECT_CARDS) return;\n    const card = this._currentCardsDrawn[cardIndex];\n    if (this._currentCardSelections.includes(card)) {\n      this._currentCardSelections = this._currentCardSelections.filter(c => c !== card);\n    } else {\n      this._currentCardSelections.push(card);\n    }\n  }\n  getCardSelections() {\n    return this._currentCardSelections;\n  }\n  drawCards() {\n    if (this.gameState !== GameManager.GAME_STATE.DRAW_CARDS) return;\n    this.gameState = GameManager.GAME_STATE.SELECT_CARDS;\n\n    /* Need Card */\n    const randomNeed = Needs[Math.floor(Math.random() * Needs.length)];\n    const needCard = new NeedCard(CARD_TYPE.NEED, randomNeed.text, \"Need\", randomNeed.need);\n    this._currentCardsDrawn.push(needCard);\n\n    /* Want Card  */\n    const randomWant = Needs[Math.floor(Math.random() * Wants.length)];\n    const wantCard = new WantCard(CARD_TYPE.WANT, randomWant.text, \"Want\", randomWant.cost, randomWant.happy);\n    this._currentCardsDrawn.push(wantCard);\n\n    /* Event Card */\n    const randomEvents = Needs[Math.floor(Math.random() * Needs.length)];\n    const eventCard = new EventCard(CARD_TYPE.EVENT, randomWant.text, \"Want\", randomWant.cost, randomWant.happy);\n    this._currentCardsDrawn.push(new NeedCard(CARD_TYPE.NEED, \"NEED\", \"Want\", 100));\n    // this._currentCardsDrawn.push(new Card(CARD_TYPE.WANT, \"WantEvent\", 100));\n\n    for (const card of this._currentCardsDrawn) {\n      if (!card.selectable) continue;\n      this.selectedNeed = 100;\n      if (card.cardType === CARD_TYPE.NEED) this.selectedNeed += card.need;else if (card.cardType === CARD_TYPE.EVENT) this.selectedWant += card.want;\n    }\n    this.lazyUpdateUI();\n    return this._currentCardsDrawn;\n  }\n  getSelectedValues() {\n    return {\n      need: this.selectedNeed,\n      want: this.selectedWant,\n      debt: this.selectedDebt,\n      total: this.selectedTotal,\n      savings: this.selectedSavings,\n      investments: this.selectedInvestments\n    };\n  }\n  lazyUpdateUI() {\n    document.querySelector(\".need\").innerHTML = \"Need: $\" + this.selectedNeed;\n    document.querySelector(\".want\").innerHTML = \"Want: $\" + this.selectedWant;\n    document.querySelector(\".debt\").innerHTML = \"Debt: $\" + this.selectedDebt;\n    document.querySelector(\".salary-discrepancy\").innerHTML = \"Salary + Discrepency: $\" + this.selectedTotal;\n    document.querySelector(\".saving\").innerHTML = \"Saving: $\" + this.selectedSavings;\n    document.querySelector(\".investment\").innerHTML = \"Investment: $\" + this.selectedInvestments;\n    //\n    document.querySelector(\".salary\").innerHTML = \"Salary: $\" + this.salary;\n    document.querySelector(\".savings\").innerHTML = \"Savings: $\" + this.savings;\n    document.querySelector(\".investment\").innerHTML = \"Investment: $\" + this.investment;\n    document.querySelector(\".debt\").innerHTML = \"Debt: $\" + this.debt;\n  }\n}\nGameManager.GAME_STATE = {\n  DRAW_CARDS: 0,\n  SELECT_CARDS: 1,\n  RESOLVE_CARDS: 2,\n  END_GAME: 3\n};\nGameManager._gameManagerInstance = null;\nclass NeedCard {\n  constructor(cardType, description, type, need) {\n    this.cardType = cardType;\n    this.description = description;\n    this.type = type;\n    this.need = need;\n    this.selectable = cardType == CARD_TYPE.WANT ? true : false;\n  }\n}\nclass WantCard {\n  constructor(cardType, description, type, want, happy) {\n    this.cardType = cardType;\n    this.description = description;\n    this.type = type;\n    this.want = want;\n    this.happy = happy;\n    this.selectable = cardType == CARD_TYPE.WANT ? true : false;\n  }\n}\nclass EventCard {\n  constructor(cardType, description, type, per, lump, happy) {\n    this.cardType = cardType;\n    this.description = description;\n    this.type = type;\n    this.per = per;\n    this.lump = lump;\n    this.happy = happy;\n    this.selectable = cardType == CARD_TYPE.WANT ? true : false;\n  }\n}\n\n// Data.\n\nexport default GameManager;","map":{"version":3,"names":["Wants","Needs","Events","CARD_TYPE","NEED","WANT","EVENT","GameManager","init","_gameManagerInstance","getInstance","constructor","gameState","GAME_STATE","DRAW_CARDS","year","balance","salary","savings","investment","debt","incomeSources","expenseSources","_currentCardsDrawn","_currentCardSelections","selectedNeed","selectedWant","selectedDebt","selectedTotal","selectedSavings","selectedInvestments","toggleSelection","cardIndex","SELECT_CARDS","card","includes","filter","c","push","getCardSelections","drawCards","randomNeed","Math","floor","random","length","needCard","NeedCard","text","need","randomWant","wantCard","WantCard","cost","happy","randomEvents","eventCard","EventCard","selectable","cardType","want","lazyUpdateUI","getSelectedValues","total","investments","document","querySelector","innerHTML","RESOLVE_CARDS","END_GAME","description","type","per","lump"],"sources":["/Users/hangpham/HackPrinceton/finance-app1/financial_literacy/src/core/gameManager.js"],"sourcesContent":["/* Singleton class that holds the current state of the game,\n   and handles the main life cycle of the game. */\nimport { Wants, Needs, Events } from './ChoiceData.js';\n\nconst CARD_TYPE = {\n  NEED: 0,\n  WANT: 1,\n  EVENT: 2\n}\n\nclass GameManager {\n  static GAME_STATE = {\n    DRAW_CARDS: 0,\n    SELECT_CARDS: 1,\n    RESOLVE_CARDS: 2,\n    END_GAME: 3\n  }\n\n  static _gameManagerInstance = null;\n\n  static init() {\n    if (GameManager._gameManagerInstance == null)\n      GameManager._gameManagerInstance = new GameManager();\n  }\n\n  static getInstance() {\n    return GameManager._gameManagerInstance;\n  }\n\n  constructor() {\n    this.gameState = GameManager.GAME_STATE.DRAW_CARDS;\n    this.year = 1;\n    this.balance = 1000;\n    this.salary = 80000;\n    this.savings = 0;\n    this.investment = 0;\n    this.debt = 0;\n    this.incomeSources = [];\n    this.expenseSources = [];\n\n    this._currentCardsDrawn = [];\n    this._currentCardSelections = [];\n\n    //\n    this.selectedNeed = 0;\n    this.selectedWant = 0;\n    this.selectedDebt = 0;\n    this.selectedTotal = 0;\n    this.selectedSavings = 0;\n    this.selectedInvestments = 0;\n  }\n\n\n  \n  toggleSelection(cardIndex) {\n    if (this.gameState !== GameManager.GAME_STATE.SELECT_CARDS) return;\n    const card = this._currentCardsDrawn[cardIndex];\n\n    if (this._currentCardSelections.includes(card)) {\n      this._currentCardSelections = this._currentCardSelections.filter(c => c !== card);\n    } else {\n      this._currentCardSelections.push(card);\n    }\n  }\n\n  getCardSelections() {\n    return this._currentCardSelections;\n  }\n\n  drawCards() {\n    if (this.gameState !== GameManager.GAME_STATE.DRAW_CARDS) return;\n    this.gameState = GameManager.GAME_STATE.SELECT_CARDS;\n\n    /* Need Card */\n    const randomNeed = Needs[Math.floor(Math.random() * Needs.length)];\n    const needCard = new NeedCard(CARD_TYPE.NEED, randomNeed.text, \"Need\", randomNeed.need);\n    this._currentCardsDrawn.push(needCard);\n\n    /* Want Card  */\n    const randomWant = Needs[Math.floor(Math.random() * Wants.length)];\n    const wantCard = new WantCard(CARD_TYPE.WANT, randomWant.text, \"Want\", randomWant.cost, randomWant.happy);\n    this._currentCardsDrawn.push(wantCard);\n\n    /* Event Card */\n    const randomEvents = Needs[Math.floor(Math.random() * Needs.length)];\n    const eventCard = new EventCard(CARD_TYPE.EVENT, randomWant.text, \"Want\", randomWant.cost, randomWant.happy);\n    this._currentCardsDrawn.push(new NeedCard(CARD_TYPE.NEED, \"NEED\", \"Want\", 100));\n    // this._currentCardsDrawn.push(new Card(CARD_TYPE.WANT, \"WantEvent\", 100));\n  \n    for (const card of this._currentCardsDrawn) {\n      if (!card.selectable) continue;\n      this.selectedNeed = 100;\n      if (card.cardType === CARD_TYPE.NEED) this.selectedNeed += card.need;\n      else if (card.cardType === CARD_TYPE.EVENT) this.selectedWant += card.want;\n    }\n    this.lazyUpdateUI();\n    return this._currentCardsDrawn;\n  }\n\n  getSelectedValues() {\n    return {\n      need: this.selectedNeed,\n      want: this.selectedWant,\n      debt: this.selectedDebt,\n      total: this.selectedTotal,\n      savings: this.selectedSavings,\n      investments: this.selectedInvestments\n    }\n  }\n\n  lazyUpdateUI() {\n    document.querySelector(\".need\").innerHTML = \"Need: $\" + this.selectedNeed;\n    document.querySelector(\".want\").innerHTML = \"Want: $\" + this.selectedWant;\n    document.querySelector(\".debt\").innerHTML = \"Debt: $\" + this.selectedDebt;\n    document.querySelector(\".salary-discrepancy\").innerHTML = \"Salary + Discrepency: $\" + this.selectedTotal;\n    document.querySelector(\".saving\").innerHTML = \"Saving: $\" + this.selectedSavings;\n    document.querySelector(\".investment\").innerHTML = \"Investment: $\" + this.selectedInvestments;\n    //\n    document.querySelector(\".salary\").innerHTML = \"Salary: $\" + this.salary;\n    document.querySelector(\".savings\").innerHTML = \"Savings: $\" + this.savings;\n    document.querySelector(\".investment\").innerHTML = \"Investment: $\" + this.investment;\n    document.querySelector(\".debt\").innerHTML = \"Debt: $\" + this.debt;\n  \n  }\n}\n\nclass NeedCard {\n  constructor(cardType, description, type, need) {\n    this.cardType = cardType;\n    this.description = description;\n    this.type = type;\n    this.need = need;\n    this.selectable = (cardType == CARD_TYPE.WANT) ? true : false;\n  }\n}\n\nclass WantCard {\n  constructor(cardType, description, type, want, happy) {\n    this.cardType = cardType;\n    this.description = description;\n    this.type = type;\n    this.want = want;\n    this.happy = happy;\n    this.selectable = (cardType == CARD_TYPE.WANT) ? true : false;\n  }\n}\n\nclass EventCard {\n  constructor(cardType, description, type, per, lump, happy) {\n    this.cardType = cardType;\n    this.description = description;\n    this.type = type;\n    this.per = per;\n    this.lump = lump;\n    this.happy = happy;\n    this.selectable = (cardType == CARD_TYPE.WANT) ? true : false;\n  }\n}\n\n\n\n\n// Data.\n\n\n\nexport default GameManager;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}